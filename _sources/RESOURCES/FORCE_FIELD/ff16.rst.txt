.. Force field Introduction - atom typing 
.. _Header_ff16:

***********
Atom typing   
***********

The atom typing is a set of procedures to determine the chemical type of an atom. From such, appropriate FF parameters for the atom can be determined, to ensure the FF model is correctly setup for a given set of interactions.

.. image:: ../SIMULATIONS/IMAGES/Orange_bar.png

**Atom types**

Consider a propanol molecule shown below. It consists of three different types of elements: carbon, hydrogen and oxygen. However, in molecular simulations, atom typing would identify more than three atom types. This is because same elemental atoms can behave chemically different depending on their chemical environments.

.. image:: ../../image/ff16_1.png
   :scale: 60%
   :align: center 

For instance, there are five different atom types: the primary (C1) and secondary (C2 and C3) alkyl carbons; the alkyl hydrogen and hydroxyl hydrogen; and a hydroxyl oxygen (O).

Obviously, some sort of atomic identification would be needed to determine atom types. Some of the common atom typing implementions would be either based on, or in combinations of, some file scripts, logic and symbolic syntax. For instance, consider the following two examples of typing procedures:

Example 1:  [CX4](CO)(F)(F)(F)

Example 2:  type = C & count(bonded_atoms(type = F)) = 3 & count(bonded_atoms(type = C)) = 1

The above examples show two different typing procedures that were used by different software packages to determine specifically a trifluoro alkyl carbon atom.

.. image:: ../SIMULATIONS/IMAGES/Orange_bar.png

**Atom keys**

Atom keys are the labels for atom types. By referring to the two examples above, one software assigns the atom key as *CT* and the other as *C791*. They are of different labels but in fact refer to the same atom types, that is, a trifluoro alkyl carbon. 

Of note is that these labels are arbitrary and do not follow any standard protocal to name them, simply because there are none. Furthermore, some FF schemes use different atom keys for different type of interactions. The most common one is to use one atom key for all bonded interactions and another one for the non-bonded vdw interaction.

.. Note::
   Most FF schemes refer atom keys and atom types as the same thing. Usually, only atom labels are shown in library files, with the typing procedures hidden within the program. 

   However, DL_FIELD distinguishes both atom keys and atom types and they are explicitly listed in the library files. They are refer to as ATOM_KEYs and ATOM_TYPEs, respectively, within the DL_FIELD framework. An ATOM_TYPE is a human readable label that uniquely refer to an ATOM_KEY. Different ATOM_TYPEs can refer to the same ATOM_KEY but not the other way round.   

.. image:: ../SIMULATIONS/IMAGES/Orange_bar.png

**Atom typing challenges**

Different FF schemes (or different software) use different atom typing procedures and assign atoms with different atom keys. Situations also become more complicated because different FF schemes can also classify atoms differently. 

For example, by referring to the propanol structure shown above, some FF schemes will assign an additional atom type for the secondary carbon atom, C3, that is connected to the oxygen atom. However, some FF schemes may even reduce the number of atom types, for instance, by collectively treating all alkyl carbons (C1, C2 and C3) as a single atom type.  

Atom typing is one of the main reason why it is difficult to interconvert FF models between different FF schemes for a given molecular system, since atom typing does not conform to any standard.

To reduce these non-standard barriers, DL_FIELD expresses ATOM_TYPEs in DL_F Notation syntax, which is universal across different FF schemes. The Notation ensures smooth data transformation within DL_FIELD when setting up a molecular system with different FF schemes.

For more information about how DL_F Notation works, please refer to the :doc:`../TUTORIALS/dlf_0`


:ref:`^ GO TO TOP ^<Header_ff16>` 
