.. _DPD_Theory:

Additional details on DPD
=========================

.. _DPD_scale:

Scaling DPD calculations
~~~~~~~~~~~~~~~~~~~~~~~~

Dissipative Particle Dynamics (DPD) simulations are often described in terms of three unit quantities:

* Mass (of a bead), :math:`m`
* Length (interaction cutoff distance), :math:`r_c`
* Energy (system temperature), :math:`k_B T`

each of which are normally set to 1 in DPD calculations and can be defined based on what we want to model. Starting with the representation of a particular chemical species as DPD particles or 'beads', we can obtain our mass unit from the contents of a particular particle. The length unit is also obtained from the particle contents, along with the numerical density of the DPD calculation :math:`\rho`, while the energy unit is normally set to the product of the operating temperature and the Boltzmann constant :math:`k_B`.

For the example of modelling water at room temperature (298 K) with :math:`N_m` molecules in each DPD bead, given that the molecular mass of water is :math:`M_r = 18.01528 \times 10^{-3}` kg mol\ :math:`^{-1}`, our mass unit is equal to:

.. math:: m = \frac{N_m M_r}{N_A} \approx 2.99 \times 10^{-26} N_m \text{ kg},

while the energy unit is equal to:

.. math:: k_B T \approx 4.116 \times 10^{-21} \text{ J}.

A 'real-life' density for water of :math:`\rho_m = 996.95` kg m\ :math:`^{-3}` gives the physical volume of this bead as:

.. math:: V_{bead} = N_m V_{mol} = \frac{N_m M_r}{N_A \rho_m} \approx 3.001 \times 10^{-29} N_m \text{ m}^3.

If we use a numerical density :math:`\rho = 3` in our simulation [#]_, the unit volume (related to the interaction cutoff :math:`r_c`) becomes:

.. math:: r_c^3 = \rho V_{bead} = \frac{\rho N_m M_r}{N_A \rho_m} \approx 9.002 \times 10^{-29} N_m \text{ m}^{3}

and thus the length unit 

.. math:: r_c \approx 4.48 \times 10^{-10} N_m^{\frac{1}{3}} \text{ m}.

There are two possible approaches to obtaining a time unit :math:`\tau` for the simulation. The first is to apply dimensional analysis and make use of the three units defined above:

.. math:: \tau = r_c \sqrt{\frac{m}{k_B T}} \approx 1.21 \times 10^{-12} N_m^{\frac{5}{6}}\text{ s}.

The second is to compare the self-diffusivity of the DPD beads - measured by calculating mean-squared displacements from simulations - with experimental values for the fluid we wish to model [Groot2001]_. In our case of modelling water beads each with :math:`N_m` molecules, the time unit is found to be:

.. math:: \tau = \frac{N_m D_{sim} r_c^2}{D_w} \approx 1.41 \times 10^{-11} N_m^{\frac{5}{3}} \text{ s}.

Parameterising DPD interactions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Groot and Warren's [Groot1997]_ form of conservative interaction:

.. math :: \mathbf{F}_{ij}^{C} = \left\{ \begin{matrix} A_{ij}\left( 1 - \frac{r_{ij}}{r_{c}} \right){\widehat{\mathbf{r}}}_{ij} & (r_{ij} < r_{c}) \\ 0 & (r_{ij} \geq r_{c}) \\ \end{matrix} \right.\ ,

is able to specify both an equation of state and different degrees of repulsion between particle (bead) species. The values of :math:`A_{ij}` for different bead pairs can be chosen or fitted to give specific behaviours or simulation outcomes. An example of choosing :math:`A_{ij}` values can include specifying degrees of hydrophobicity for different bead species, e.g. those found in amphiphilic molecules with hydrophilic and hydrophobic sections. 

Experimental properties or outcomes that can be used to fit :math:`A_{ij}` values can include expected phases or structures (e.g. micelles, vesicles, bilayers) at given concentrations, critical micelle concentrations (CMCs) and/or partition coefficients (ratios of concentrations in two immiscible phases) [Anderson2017]_.

Alternative and additional approaches for interactions between DPD particles include many-body DPD, bond interactions (stretching, fixed-length holonomic constraints, angles, dihedrals etc.) and electrostatics.

Like-like interactions
----------------------

The equation of state resulting from the Groot-Warren conservative interaction has been found from viral theorem to be:

.. math :: p = \rho k_B T + \alpha A_{ij} \rho^2,
  :label: eostheory

where :math:`\alpha \approx 0.101 r_c^{-4}` when the numerical bead density :math:`\rho > 2`. While it is not especially realistic in describing a real fluid's behaviour, we can still use it to parameterise interactions between particles of the same species by deriving a relationship with isothermal compressibility :math:`\kappa_T`, the rate of change of density with pressure at constant temperature. The derivative of :eq:`eostheory` with respect to density at constant temperature gives the following relationship:

.. math :: \kappa^{-1} = \frac{V_{mol} N_m}{k_B T \kappa_T } = \frac{M_r N_m}{\rho_m R T \kappa_T} = \frac{1}{k_B T} \left( \frac{\partial p}{\partial \rho} \right)_T = 1 + \frac{2 \alpha A_{ij} \rho}{k_B T}.
  :label: compress

Applying this to water at room temperature - which has an isothermal compressibility of :math:`\kappa_T = 4.533 \times 10^{-10}` Pa\ :math:`^{-1}` - with one molecule per bead (:math:`N_m = 1`), we can determine a reciprocal of dimensionless isothermal compressibility of :math:`\kappa^{-1} \approx 16.09`. Rearrangement of the above equation with this value then gives the conservative force parameter as:

.. math :: A_{ij} \approx \frac{75 k_B T}{\rho}.

Setting the bead density as :math:`\rho = 3` along with :math:`k_B T = 1` leads to :math:`A_{ij} = 25`. This value for the conservative force parameter is very commonly used in DPD simulations.

.. _FloryHuggins:

Flory-Huggins solution theory
-----------------------------

To parameterise conservative force parameters :math:`A_{ij}^{AB}` between different particle species (A and B), we can use an approach based on the Flory-Huggins solution theory of polymers [Groot1997]_. Assuming beads of species A and B are of equal size and molecules are made from these beads, we can express a Gibbs free energy of mixing based on the volume fractions of each species (:math:`\phi_A`, :math:`\phi_B`) and the number of beads per molecule (:math:`n_A`, :math:`n_B`):

.. math :: \frac{\Delta G^{mix}}{k_B T} = \frac{\phi_A}{n_A} \ln \phi_A + \frac{\phi_B}{n_B} \ln \phi_B + \chi^{\text{AB}} \phi_A \phi_B,

where we introduce a parameter :math:`\chi^{\text{AB}}` to represent the *non-ideal* part of the mixing energy: the higher the value, the more the components will repel each other. Groot and Warren found that the :math:`\chi^{\text{AB}}`-parameter can be given in terms of the interaction parameter between the two species by the following predicted relationship:

.. math :: \chi^{\text{AB}} = \left( A_{ij}^{\text{AB}} - A_{ij}^{\text{AA}} \right) \frac{2\alpha\rho}{k_B T}.

provided that the two species (A and B) interact among themselves in the same way (i.e. :math:`A_{ij}^{\text{AA}} = A_{ij}^{\text{BB}}`) [#]_. The value of :math:`A_{ij}^{\text{AB}}` thus determines how well the two components will mix together. 

In real DPD simulations, while the linear relationship between :math:`\chi^{\text{AB}}` and :math:`\left( A_{ij}^{\text{AB}} - A_{ij}^{\text{AA}} \right)` holds, the proportionality constant is generally not equal to :math:`2\alpha\rho/k_B T`. We can find the actual proportionality constant for a given particle density from series of simulations with separating beads or molecules, each with different values of :math:`A_{ij}^{\text{AB}}`. The volume fraction of one species (e.g. :math:`\phi_{A}` for species A) in separated regions can be used to determine :math:`\chi^{\text{AB}}`:

.. math :: \chi^{\text{AB}} n_A = \frac{\ln\lbrack(1 - \phi_{A})/\phi_{A}\rbrack}{1 - 2\phi_{A}}.

Values of :math:`\chi^{\text{AB}}`, either experimentally determined or estimated from atomistic molecular dynamics simulations, can then be used to determine the required values of :math:`A_{ij}^{\text{AB}}`.

Infinite dilution activity coefficients
---------------------------------------

Another approach to parameterise DPD interactions between different particle species is to match up :math:`A_{ij}^{\text{AB}}` with infinite dilution activity coefficients :math:`\gamma^{\infty}` [Vishnyakov2013]_. The activity coefficient describes non-ideal mixing behaviour and the effect this has on chemical potential compared to the value for a pure component :math:`i`:

.. math:: \mu_i = \mu_i^{\circ} + RT \ln x_i \gamma_i,

with the infinite dilution activity coefficient :math:`\gamma^{\infty}_i` as the limiting value when the mole fraction :math:`x_i` approaches zero. This value can be obtained for real systems either from experimental values or by using predictive models based on functional groups (e.g. UNIFAC). 

To find the relationship between :math:`A_{ij}^{\text{AB}}` and :math:`\gamma^{\infty}`, we can carry out Widom trial insertions of each bead type into simulation configurations of pure components. The excess chemical potentials :math:`\mu_i - \mu_i^{\circ}` of inserting molecules of A and B into pure A are replaced with logarithms of block-averaged exponentials of inserted energies, thus:

.. math:: \ln \gamma^{\infty}_B = \ln \left\langle \exp \left(-\frac{E_{AB}^{ins}}{k_B T}\right) \right\rangle_{NVT} - \ln \left\langle \exp \left(-\frac{E_{AA}^{ins}}{k_B T}\right) \right\rangle_{NVT} - \ln \frac{\rho_B n_A}{\rho_A n_B}

where :math:`n_i` is the number of beads in a molecule of component :math:`i`. 

For Groot-Warren interactions, the block-averages in the above expression end up being directly relatable to conservative force parameters and thus give linear relationships between :math:`\ln \gamma^{\infty}_B` and :math:`A_{ij}^{AB} - A_{ij}^{AA}`. Unlike the Flory-Huggins approach above, no assumption is made about the like-like parameters :math:`A_{ij}^{AA}` and :math:`A_{ij}^{BB}`, which can differ for the various particle types.

Many-body DPD
-------------

While Groot-Warren interactions can be used for many mesoscopic simulation systems, they are not always sufficient to accurately describe the thermodynamic behaviour of real systems. In particular, their resulting quadratic equation of state :eq:`eostheory` cannot describe fluids with multiple coexisting phases, e.g. liquid and vapour.

One approach that can provide better thermodynamics at the mesoscale is 'multibody' or many-body DPD [Pagonabarraga2001]_ [Trofimov2002]_, which directly specifies the free energy of fluids. The total free energy of a system can be expressed as the sum of free energies per particle :math:`\psi`, which are dependent on localised densities :math:`\tilde{\rho}` that can be calculated for each particle, i.e.

.. math:: F = \sum_i \psi \left(\tilde{\rho}_i\right).

The free energy per particle can be split into ideal, bulk and excess terms. Of these contributions, only the excess part of the free energy is involved in effective (conservative) interactions between particles, which can be expressed in a pairwise form:

.. math:: \mathbf{F}^{C}_{ij} = -\left(\frac{\partial \psi^{ex} \left(\tilde{\rho}_i \right)}{\partial \tilde{\rho}_j} + \frac{\partial \psi^{ex} \left(\tilde{\rho}_j \right)}{\partial \tilde{\rho}_i}\right) w^{C} \left(r_{ij} \right) \widehat{\mathbf{r}}_{ij},

where :math:`w^{C}` is a function of distance. The form of excess free energy per particle :math:`\psi^{ex}` has an effect on the resulting equation of state for a single fluid:

.. math:: p = \rho^2 \frac{\partial \psi}{\partial \rho} = \rho k_B T + \rho^2 \frac{\partial \psi^{ex}}{\partial \rho}.

The localised density can be calculated by summing up contributions for another function of distance:

.. math:: \tilde{\rho}_i = \sum_{j \neq i} w^{\rho} \left(r_{ij}\right),

which can be restricted to another cutoff distance, i.e. :math:`r_{ij} < r_d`. The two functions are related to each other by:

.. math:: w^{C} = - \frac{d w^{\rho}}{dr}.

The 'standard' Groot-Warren potential can be recovered by setting the excess free energy per particle to

.. math:: \psi^{ex} \left( \rho \right) = \frac{\pi}{30} A \rho

and the function for localised density calculations to

.. math:: w^{\rho} \left(r_{ij}\right)= \frac{15}{2 \pi r_d^3} \left(1 - \frac{r_{ij}}{r_d}\right)^2 ~~ \left(r_{ij} < r_d\right).

A simple many-body DPD model to give a cubic equation of state and vapour-liquid coexistence can be established by using an additional density term for the excess free energy [Warren2003]_ with two different localised densities, i.e.

.. math:: \psi^{ex} \left(\rho\right) = \frac{\pi}{30} A \overline{\rho} + \frac{\pi r_d^4}{30} B \tilde{\rho}^2

where :math:`r_d = r_c` for :math:`w^{\rho} \left(r_{ij}\right)` when calculating the first localised density :math:`\overline{\rho}`. The resulting pairwise conservative force can be simplified to the standard Groot-Warren form with an additional density-based term:

.. math:: \mathbf{F}^{C}_{ij} = \left[ A_{ij} \left(1 - \frac{r_{ij}}{r_c}\right) + B \left(\tilde{\rho}_i + \tilde{\rho}_j \right) \left(1 - \frac{r_{ij}}{r_d}\right)  \right] \widehat{\mathbf{r}}_{ij},

noting that :math:`A_{ij} \equiv A` can be specified for different pairs of species and set to negative values to provide attractions between particles, while the repulsive parameter :math:`B` must be kept constant for all species to ensure the forces are conservative [Warren2013a]_. These two parameters can be chosen or fitted for e.g. both isothermal compressibility (as per standard Groot-Warren interactions) and interfacial tension.

Inclusion of electrostatics
---------------------------

The long-range nature of charge-based interactions can have an effect on systems operating at the mesoscale, and as such there are circumstances when these need to be included in DPD simulations. Techniques used to solve the Poisson equation for molecular dynamics simulations, e.g. Particle-Particle Particle-Mesh (PPPM) and Ewald summation, can be applied to DPD simulations.

One important aspect to consider for DPD electrostatics is the softness of bead-bead interactions. While the hard-core interactions typically used in atomistic and coarse-grained molecular dynamics can prevent oppositely-charged point charges from collapsing on top of each other, this is not automatically guaranteed for e.g. Groot-Warren soft repulsive interactions [#]_. 

To avoid soft ion collapse, point charges are often replaced with charge functions to spread out each charge over a finite volume. These smearing functions are selected to act entirely at shorter ranges, with the potential reverting back to standard Coulombic for point charges at larger distances. This property enables the long-range parts of electrostatic interactions to be calculated using techniques common to molecular dynamics without modifications.

Two approaches to including electostatics in DPD simulations have been applied. The first uses a form of PPPM [Groot2003]_, which starts by assigning smeared charge distributions to a grid. Each charge :math:`q_i` is multiplied by a smearing function :math:`f(r)`, e.g.

.. math:: f(r) = \frac{3}{\pi r_e^3}\left(1 - \frac{r}{r_e}\right) ~~~~~ (r < r_e)

where :math:`r_e` is the electrostatic smearing radius, to give a charge concentration :math:`\rho^{*}` of cations minus anions, before assigning values to a regular grid representing the system volume. The electrostatic field :math:`\psi` is then calculated at all grid points to satisfy the Poisson equation:

.. math:: \nabla \cdot \left(p(r) \nabla \psi\right) = -\Gamma \rho^{*}

where :math:`p(r)` is the local polarisability relative to the background fluid and :math:`\Gamma` is a dimensionless permittivity coefficient equal to

.. math:: \Gamma = \frac{e^2}{k_B T \epsilon_0 \epsilon_r r_c}

where :math:`e` is the charge on an electron, :math:`\epsilon_0` the permittivity of a vacuum and :math:`\epsilon_r` is the relative permittivity of the background fluid. For water at room temperature, the permittivity coefficient is related to the number of molecules per water bead, i.e.

.. math:: \Gamma \approx 20.00 N_m^{-\frac{1}{3}}.

The electrostatic field can be solved either by using Fourier transforms or iteratively by real-space successive overdamped relaxation (SOR). The electrostatic force acting on an ion is then found by finding the gradient of the electrostatic field and using the smearing function over grid points within :math:`r_e` of the particle centre:

.. math:: \mathbf{F}_i^{e} = -q_i \sum_j f_j \left(\mathbf{r}_c\right) \nabla \psi \left(\mathbf{r}_j\right).

The other approach for DPD electrostatics involves a modified form of the Ewald sum [GonzalezMelchor2006]_. The smearing function is now defined as a modification to the Coulombic potential:

.. math:: U^{e} = \frac{\Gamma}{4 \pi} \sum_{i, j \neq i} \frac{q_i q_j}{r_{ij}} \left[1 - f\left(r_{ij}\right) \right],

where :math:`q_i` is the charge (valence) on ion :math:`i`. Ewald summation splits the potential into real-space (short range) and reciprocal-space (long range) parts, making use of the known Fourier transform for a Gaussian (normal) distribution. Since the charge smearing function is designed to only be applicable at shorter ranges, only the real-space terms for potential (shown below) and corresponding forces need to be modified:

.. math:: U^{e, real} = \frac{\Gamma}{4 \pi} \sum_{i, j \neq i} \frac{q_i q_j}{r_{ij}} \left[\textrm{erfc}\left(\alpha r_{ij}\right) - f\left(r_{ij}\right) \right],

where :math:`\alpha` is the Ewald sum real-space convergence parameter. The reciprocal space part of the Ewald sum can be solved using any viable method: standard (analytical) calculations, PPPM, (Smooth) Particle Mesh Ewald etc.

Several choices of smearing function for Ewald sums are possible and have been used in DPD calculations. One choice (originally proposed) is a truncated form of a Slater-type function:

.. math:: f(r) = \exp \left(-2 \beta\right) \left(1 + \beta r\right)

where :math:`\beta` is related to a charge decay length. Another choice is to use a Gaussian function [Warren2013b]_, i.e.

.. math:: f(r) = \mathrm{erfc} \left(\frac{r_{ij}}{2 \sigma_G}\right)

where :math:`\sigma_G` is the screening length. If :math:`\sigma_G = \frac{1}{2 \alpha}`, then all real-space potentials and forces reduce to zero and the calculation can be carried out entirely in reciprocal space.

Transport properties
~~~~~~~~~~~~~~~~~~~~

As a method designed to give both temperature control and both local and global momentum conservation (Galilean invariance), DPD as a simulation method is well-suited to examine how chemical species behave when undergoing flow and determine their rheological behaviour. 

The rheological behaviour of a species can be determined from how it responds to being deformed, i.e. measuring the shear stress required to apply a particular shear rate or velocity gradient. The relationship between shear stress and shear rate can be determined from DPD simulations by using non-equilibrium MD techniques, such as the application of linear shear (constant velocity gradient).

The random and dissipative forces in the DPD thermostat have an effect on this rheological behaviour. Alternative pairwise thermostats have subsequently been proposed to provide even more realistic hydrodynamic behaviours for denser fluids.

.. _ViscosityLinearShear:

Measuring viscosity using linear shear
--------------------------------------

The dynamic viscosity of a fluid is defined as the ratio of shear stress :math:`\tau` (shearing force per unit cross-sectional area) to the rate of shear deformation :math:`\dot{\gamma}` (gradient of velocity):

.. math:: \mu = \frac{\tau}{\dot{\gamma}},

where the shear stress is a result of the applied shear rate. 

The relationship between shear stress and shear rate can vary from fluid to fluid. The most common relationship - particularly for simple fluids - assumes the dynamic viscosity :math:`\mu` remains constant for all shear rates, describing a *Newtonian fluid*. Other more complex fluids (e.g. polymer suspensions) might have viscosities that increase or decrease as the shear rate increases or even require a minimum shear stress to start flowing: these describe *shear thickening* (dilatant), *shear thinning* (pseudo plastic) and *Bingham plastic* fluids. 

To determine the viscosity of a fluid, we need to find a relationship between applied shear rates (velocity gradients) and resulting shear stresses, which we can work out by running some DPD simulations. 

The Lees-Edwards periodic boundary condition [Lees1972]_ can apply a linear shear flow field to a particle simulation. It works by both changing the velocities and tangential positions of particles that move through the given periodic boundary. For example, to apply wall velocities of :math:`-\mathbf{v}_{w}` and :math:`+\mathbf{v}_{w}` at the bottom and top boundaries of a box, any particle moving through the top boundary would be shifted by a displacement :math:`-\mathbf{v}_{w} t` before re-entering the box - where :math:`t` is the time since shearing started - and its velocity modified by :math:`-2\mathbf{v}_{w}`. Similarly, a particle moving through the bottom boundary would be displaced by :math:`+\mathbf{v}_{w} t` and its velocity modified by :math:`+2\mathbf{v}_{w}`.

We can calculate a stress tensor for the system at a given timestep by summing products of components of pairwise forces and vectors between particle pairs, i.e.

.. math :: \sigma_{\alpha \beta} = \sum_i \left(m_i v_{i,\alpha} v_{i,\beta} + \sum_{j>i} F_{ij,\alpha} r_{ij,\beta} \right), ~~~~~ (\alpha, \beta = x, y, z)

which can be averaged over a reasonably large number of timesteps to obtain representative values. For a system with shear flow, only one of the symmetric off-diagonal terms (:math:`\sigma_{\alpha \beta} = \sigma_{\beta \alpha}`, :math:`\alpha \ne \beta`) is required and will represent the shear stress :math:`\tau`. For instance, if the :math:`x`-component of velocity varies along :math:`y` (so the velocity gradient is :math:`\frac{\partial v_x}{\partial y}`), we will need to look at either :math:`\sigma_{yx}` or :math:`\sigma_{xy}`.

We can therefore carry out several simulations with different velocity gradients (by changing the wall velocities :math:`\pm\mathbf{v}_{w}`) and find the resulting shear stresses. Plotting the stresses against shear rates will give the relationship between the two, and the gradient of the curve at each point will give the fluid viscosity. If the fluid is Newtonian, the curve will be a straight line crossing through the origin (i.e. zero stress at zero shear rate).

.. _AlternativeDPD:

Alternative pairwise thermostats to DPD
---------------------------------------

The dissipative force parameter :math:`\gamma` in the DPD thermostat is one way we can control the dynamic viscosity :math:`\mu`. There are, however, limitations on how much we can control the viscosity using this thermostat.

Assuming the random force has a similar linear dependence to that used by Groot-Warren conservative forces, i.e. for :eq:`dissipative`-:eq:`screen` in :ref:`DPD_Intro`:

.. math :: w^R (r_{ij}) = \left\{ \begin{matrix} 1 - \frac{r_{ij}}{r_{c}} & (r_{ij} < r_{c}) \\ 0 & (r_{ij} \geq r_{c}) \\ \end{matrix} \right.\ ,

and also **not applying conservative forces**, we can obtain the following relationship for the viscosity [Marsh1997]_:

.. math :: \mu \approx \frac{45 k_B T}{4 \pi \gamma r_c^3} + \frac{2 \pi \gamma \rho^2 r_c^5}{1575} 
  :label: viscDPDtheory

which is pretty complex and might not really be suited for modelling flows of dense liquids [#]_. Adding conservative forces will change this relationship, but it might still be difficult to obtain a realistic viscosity for a liquid with the DPD thermostat. **Note**: This does *not* mean the DPD thermostat cannot be used for liquid systems, particularly if you are more interested in equilibrium structures than the detailed hydrodynamics.

One way around this is to use a different pairwise thermostat. Two particularly interesting choices for flow-based systems are the Lowe-Andersen [Lowe1999]_ and Stoyanov-Groot [Stoyanov2005]_ thermostats, both of which are pairwise variants of the Andersen thermostat [Andersen1980]_ and use a collision frequency :math:`\Gamma` as their main parameter. 

For each interacting particle pair, we generate a random number :math:`u_{ij}` between 0 and 1, and if :math:`u_{ij} < \Gamma \Delta t`, we select that pair for thermostatting after integration of conservative (interaction) forces. Going through the selected particle pairs in a randomised order and using the most up-to-date values of particle velocities, we apply the following modifications to each pair's velocities:

.. math::

   \mathbf{v}^{\prime}_i = \mathbf{v}_i - \frac{\mu_{ij}}{m_i} \left( -\left({\widehat{\mathbf{r}}}_{ij} \cdot \mathbf{v}_{ij} \right) + v_{ij}^{\circ} \right) {\widehat{\mathbf{r}}}_{ij}

.. math::

   \mathbf{v}^{\prime}_j = \mathbf{v}_j + \frac{\mu_{ij}}{m_j} \left( -\left({\widehat{\mathbf{r}}}_{ij} \cdot \mathbf{v}_{ij} \right) + v_{ij}^{\circ} \right) {\widehat{\mathbf{r}}}_{ij}

where :math:`\mu_{ij} = \frac{m_i m_j}{m_i + m_j}` is the reduced mass between the particles and :math:`v_{ij}^{\circ} = \zeta_{ij} \sqrt{\frac{k_B T}{\mu_{ij}}}` is a randomised replacement relative velocity. It can be shown that the viscosity for a single species obtained by these thermostats is:

.. math :: \mu = \frac{\pi \rho^2 \Gamma r_c^5}{75 m} 
  :label: viscLA
   
which is clearly simpler than the expression for the DPD thermostat in :eq:`viscDPDtheory` and can obtain larger viscosities for dense liquids. 

The Stoyanov-Groot thermostat adds additional pairwise forces for pairs that are not selected for thermostatting:

.. math :: \mathbf{F}_{ij}^{T} = -\alpha^{T} w^{T} \left( r_{ij} \right) \left(1 - \frac{k_B T^{*}}{k_B T}\right) \left( {\widehat{\mathbf{r}}}_{ij} \cdot \mathbf{v}_{ij} \right){\widehat{\mathbf{r}}}_{ij}  

where :math:`\alpha^{T}` is an additional system-wide coupling parameter for the thermostat, :math:`w^{T}` is a weighting function similar to that used for DPD random forces and :math:`T^{*}` is an instantaneous temperature calculated using another pairwise weighting function for all interacting particle pairs. These additional pairwise Nosé-Hoover forces can ensure better temperature control, particularly when :math:`\Gamma` is low and not many particle pairs are selected for Lowe-Andersen thermostatting. 

.. rubric:: Footnotes

.. [#] The numerical density shown here is frequently used in DPD simulations with Groot-Warren conservative interactions as this is close to the lowest density for which the constant (density-insensitive) equation of state applies.

.. [#] This follows from the assumption in Flory-Huggins solution theory that all particles (solvent and monomers) are equal in size.

.. [#] Higher values of :math:`A_{ij}` can make the use of point charges in DPD simulations viable, particularly if a larger degree of coarse-graining is in use [Vaiwala2017]_, but greater care is needed when starting such simulations to ensure oppositely-charged particles do not start too close together.

.. [#] Dividing the dynamic viscosity by fluid density to give the *kinematic viscosity* :math:`\nu` and dividing this property by the fluid diffusivity :math:`D` gives the dimensionless Schmidt number :math:`\mathrm{Sc}`. For DPD simulations with no conservative forces, this value is typically around 1: fine for gases but generally too low for liquids, whose values are typically around 1000. 

.. rubric:: References

.. [Groot2001] RD Groot and KL Rabone, Mesoscopic simulation of cell membrane damage, morphology change and rupture by nonionic surfactants, *Biophysical Journal*, **81**, p. 725-736, 2001, doi: 10.1016/S0006-3495(01)75737-2.

.. [Groot1997] RD Groot and PB Warren, Dissipative particle dynamics: Bridging the gap between atomistic and mesoscopic simulation, *Journal of Chemical Physics*, **107**, p. 4423–4435, 1997, doi: 10.1063/1.474784. 

.. [Vishnyakov2013] A Vishnyakov, M-T Lee and AV Neimark, Prediction of the critical micelle concentration of nonionic surfactants by dissipative particle dynamics simulations, *Journal of Physical Chemistry Letters*, **4**, p. 797-802, 2013, doi: 10.1021/jz400066k.

.. [Anderson2017] RL Anderson, DJ Bray, AS Ferrante, MG Noro, IP Stott and PB Warren, Dissipative particle dynamics: systematic parametrization using water-octanol partition coefficients, *Journal of Chemical Physics*, **147**, 094503, 2017. doi: 10.1063/1.4992111.

.. [Pagonabarraga2001] I Pagonabarraga and D Frenkel, Dissipative particle dynamics for interacting systems, *Journal of Chemical Physics*, **115**, p. 5015-5026, 2001. doi: 10.1063/1.1396848.

.. [Trofimov2002] SY Trofimov, ELF Ries and MAJ Michels, Thermodynamic consistency in dissipative particle dynamics simulations of strongly nonideal liquids and liquid mixtures, *Journal of Chemical Physics*, **117**, p. 9383-9394, 2002. doi: 10.1063/1.1515774.

.. [Warren2003] PB Warren, Vapor-liquid coexistence in many-body dissipative particle dynamics, *Physical Review E*, **68**, 066702, 2003. doi: 10.1103/PhysRevE.68.066702.

.. [Warren2013a] PB Warren, No-go theorem in many-body dissipative particle dynamics, *Physical Review E*, **87**, 045303, 2013. doi: 10.1103/PhysRevE.87.045303.

.. [Groot2003] RD Groot, Electrostatic interactions in dissipative particle dynamics - simulation of polyelectrolytes and anionic surfactants, *Journal of Chemical Physics*, **118**, p. 11265-11277, 2003, doi: 10.1063/1.1574800.

.. [GonzalezMelchor2006] M González-Melchor, E Mayoral, ME Velázquez and J Alejandre, Electorstatic interactions in dissipative particle dynamics using the Ewald sums, *Journal of Chemical Physics*, **125**, 224107, 2006, doi: 10.1063/1.2400223.

.. [Warren2013b] PB Warren, A Vlasov, L Anton and AJ Masters, Screening properties of Gaussian electrolyte models, with application to dissipative particle dynamics, *Journal of Chemical Physics*, **138**, 204907, 2013, doi: 10.1063/1.4807057.

.. [Marsh1997] CA Marsh, G Backx and MH Ernst, Static and dynamic properties of dissipative particle dynamics, *Physical Review E*, **56**, p. 1676-1691, 1997, doi: 10.1103/PhysRevE.56.1676.

.. [Andersen1980] HC Andersen, Molecular dynamics simulations at constant pressure and/or temperature, *Journal of Chemical Physics*, **72**, p. 2384-2393, 1980, doi: 10.1063/1.439486.

.. [Vaiwala2017] R Vaiwala, S Jadhav and R Thaokar, Electrostatic interactions in dissipative particle dynamics - Ewald-like formalism, error analysis, and pressure computation, *Journal of Chemical Physics*, **146**, 124904, 2017, doi: 10.1063/1.4978809.

