.. DL_MESO tutorial.
.. _Header_dlm_6:

.. |br| raw:: html

   <br />

*********************
DL_MESO_LBE utilities
*********************

As well as the main LBE code (DL_MESO_LBE), DL_MESO comes with a number of utilities that can be used to help set up DL_MESO_LBE simulations and process some of the outputs. 

The source codes for all of these utilities can be found in the *LBE/utility* directory of the DL_MESO package, all of which need be compiled using a C++ compiler (e.g. ``g++``). All LBE utilities (along with the DPD utilities) can be compiled using the Makefile in the *WORK* directory with the instructions shown in the :doc:`DL_MESO Ready, get set, go guide <../dl_meso_howto>`. Each utility can be run with a command-line flag ``-h``, e.g. ::

   ./utility.exe -h

to provide details and show the available command-line options.


.. image:: ../SIMULATIONS/IMAGES/Orange_bar.png

.. _lbeinitcreate:

**lbeinitcreate.cpp**

This utility helps to create a :ref:`lbin.init <lbin_init>` file to specify initial conditions for a LBE simulation other than uniform values specified in the :ref:`lbin.sys <lbin_sys>` simulation setup file. In particular, it can be used to add circular/spherical fluid drops and/or rectangular/cuboidal regions with fixed values of solute concentration or temperature.

The source code for this utility is normally compiled to produce the executable ``init.exe``, and can be run with the command: ::

   ./init.exe

It requires a :ref:`lbin.sys <lbin_sys>` file to be present in the directory where it is run. From this file it will read in:

* the number of dimensions (2 or 3)
* numbers of fluids, solutes and temperature fields
* initial and constant fluid densities
* initial solute concentrations and/or temperature
* the size of the grid

After this, the utility will print relevant information to the screen before prompting the user to enter information about fluid drops and regions of solute concentration or temperature to be added to the simulation. Based on user input, the utility will then create the *lbin.init* file to include the drops and regions of constant concentration/temperature in place of default values at the relevant grid points. 

.. image:: ../SIMULATIONS/IMAGES/Orange_bar.png

.. _lbplot3dgather:

**lbplot3dgather.cpp**

After a parallel DL_MESO_LBE calculation producing multiple Plot3D output files per timestep, this utility pulls those files together to create a single file per timestep.

This utility is normally compiled to produce the executable ``plot3d.exe``, and can be run with the command: ::

   ./plot3d.exe


As well as the *lbout\*.q* Plot3D solution files and *lbout\*.xyz* or *lbout\*.xy* grid files, this utility also requires the *lbout.info* file generated by DL_MESO_LBE to read in information about the contents of the files. 

No user input is required: the utility will find all of the available solution and grid files, and then create combined *lbtout\*.q* solution files and an accompanying *lbtout.xyz* or *lbtout.xy* grid file.


.. image:: ../SIMULATIONS/IMAGES/Orange_bar.png

.. _lbevtkgather:

**lbevtkgather.cpp**

After a parallel DL_MESO_LBE calculation producing multiple XML-style VTK output files per timestep, this utility creates linking files that can be opened directly in `Paraview <https://www.paraview.org>`_ to visualise the simulation.

This utility is normally compiled to produce the executable ``vtk.exe``, and can be run with the command: ::

   ./vtk.exe


As well as the *lbout\*.vts* VTK files, this utility also requires the *lbout.info* and *lbout.ext* files generated by DL_MESO_LBE to read in information about the contents of the VTK files and the grid extents they include. The utility will then create a series of *lbout\*.pvts* files (one per timestep), which include references to the original *lbout\*.vts* files and where they fit inside the overall grid.

No user input is required by default, although if the output files were created using a customised version of DL_MESO_LBE that only outputs one property in the files (e.g. one fluid's density), command-line options are available to tell the utility which property to include in the *lbout\*.pvts* files:

* ``-a`` to include all properties (densities, mass fractions, concentrations, temperature) for all fluids, solutes and/or temperature fields
* ``-d`` to include a single fluid density
* ``-f`` to include a single fluid mass fraction
* ``-c`` to include a single solute concentration
* ``-t`` to include temperature only

.. image:: ../SIMULATIONS/IMAGES/Orange_bar.png

.. _lbedumpinit:

**lbedumpinit.cpp**

This utility creates a *lbin.init* file for a new LBE simulation from the :ref:`lbout.dump <lbout_dump>` simulation restart file of a previous one. 

The source code for this utility is normally compiled to produce the executable ``dump_to_init.exe``, and can be run with the command: ::

   ./dump_to_init.exe

No user input or other files are required: the :ref:`lbout.dump <lbout_dump>` file includes all the information needed to find the macroscopic properties (velocity, densities, concentrations, temperature) at each grid point. The utility will create the :ref:`lbin.init <lbin_init>` file and also report the timestep number for the :ref:`lbout.dump <lbout_dump>` file.

.. image:: ../SIMULATIONS/IMAGES/Orange_bar.png

.. _lbedumpvtk:

**lbedumpvtk.cpp**

This utility creates an XML-style VTK file from a :ref:`lbout.dump <lbout_dump>` simulation restart file, which can be used to visualise the simulation at that point.

This utility is normally compiled to produce the executable ``dump_to_vtk.exe``, and can be run with the command: ::

   ./dump_to_vtk.exe

No user input or other files are required: the :ref:`lbout.dump <lbout_dump>` file includes all the information needed to find the macroscopic properties (velocity, densities, concentrations, temperature) at each grid point. The utility will create a *lbdump.vts* file, which can be opened in `Paraview <https://www.paraview.org>`_, and also report the timestep number for the :ref:`lbout.dump <lbout_dump>` file.

:ref:`^ GO TO TOP ^<Header_dlm_6>`
